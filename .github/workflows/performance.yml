name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * 0'  # Weekly on Sunday at 4 AM

jobs:
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build and start service
      run: |
        docker build -t keiko-api-contracts:perf .
        docker run -d -p 3000:3000 --name perf-test keiko-api-contracts:perf
        sleep 10
        
    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Create k6 test script
      run: |
        cat > load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        import { Rate } from 'k6/metrics';

        export let errorRate = new Rate('errors');

        export let options = {
          stages: [
            { duration: '2m', target: 10 }, // Ramp up to 10 users
            { duration: '5m', target: 10 }, // Stay at 10 users
            { duration: '2m', target: 20 }, // Ramp up to 20 users
            { duration: '5m', target: 20 }, // Stay at 20 users
            { duration: '2m', target: 0 },  // Ramp down to 0 users
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'], // 95% of requests must complete below 500ms
            http_req_failed: ['rate<0.1'],   // Error rate must be below 10%
            errors: ['rate<0.1'],
          },
        };

        const BASE_URL = 'http://localhost:3000';

        export default function() {
          // Test health endpoint
          let healthRes = http.get(`${BASE_URL}/health`);
          check(healthRes, {
            'health status is 200': (r) => r.status === 200,
            'health response time < 100ms': (r) => r.timings.duration < 100,
          }) || errorRate.add(1);

          // Test specs endpoint
          let specsRes = http.get(`${BASE_URL}/specs`);
          check(specsRes, {
            'specs status is 200': (r) => r.status === 200,
            'specs response time < 200ms': (r) => r.timings.duration < 200,
          }) || errorRate.add(1);

          // Test frontend OpenAPI endpoint
          let frontendRes = http.get(`${BASE_URL}/frontend/openapi.json`);
          check(frontendRes, {
            'frontend API status is 200': (r) => r.status === 200,
            'frontend API response time < 300ms': (r) => r.timings.duration < 300,
            'frontend API response size > 1000': (r) => r.body.length > 1000,
          }) || errorRate.add(1);

          // Test metrics endpoint
          let metricsRes = http.get(`${BASE_URL}/metrics`);
          check(metricsRes, {
            'metrics status is 200': (r) => r.status === 200,
            'metrics response time < 200ms': (r) => r.timings.duration < 200,
          }) || errorRate.add(1);

          // Test versions endpoint
          let versionsRes = http.get(`${BASE_URL}/versions`);
          check(versionsRes, {
            'versions status is 200': (r) => r.status === 200,
            'versions response time < 150ms': (r) => r.timings.duration < 150,
          }) || errorRate.add(1);

          sleep(1);
        }
        EOF
        
    - name: Run load test
      run: k6 run load-test.js
      
    - name: Stop test container
      if: always()
      run: docker rm -f perf-test

  stress-test:
    name: Stress Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build and start service
      run: |
        docker build -t keiko-api-contracts:stress .
        docker run -d -p 3000:3000 --name stress-test keiko-api-contracts:stress
        sleep 10
        
    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Create stress test script
      run: |
        cat > stress-test.js << 'EOF'
        import http from 'k6/http';
        import { check } from 'k6';

        export let options = {
          stages: [
            { duration: '1m', target: 50 },  // Ramp up to 50 users
            { duration: '3m', target: 100 }, // Ramp up to 100 users
            { duration: '2m', target: 200 }, // Ramp up to 200 users
            { duration: '1m', target: 0 },   // Ramp down
          ],
        };

        const BASE_URL = 'http://localhost:3000';

        export default function() {
          let responses = http.batch([
            ['GET', `${BASE_URL}/health`],
            ['GET', `${BASE_URL}/specs`],
            ['GET', `${BASE_URL}/metrics`],
            ['GET', `${BASE_URL}/versions`],
          ]);

          check(responses[0], { 'health status is 200': (r) => r.status === 200 });
          check(responses[1], { 'specs status is 200': (r) => r.status === 200 });
          check(responses[2], { 'metrics status is 200': (r) => r.status === 200 });
          check(responses[3], { 'versions status is 200': (r) => r.status === 200 });
        }
        EOF
        
    - name: Run stress test
      run: k6 run stress-test.js
      
    - name: Stop test container
      if: always()
      run: docker rm -f stress-test
