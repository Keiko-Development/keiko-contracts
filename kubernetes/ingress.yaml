apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: keiko-api-contracts-ingress
  namespace: keiko
  annotations:
    # Cert-Manager für automatische TLS-Zertifikate
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # NGINX Ingress Controller Konfiguration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';" always;
    
    # Rate Limiting (zusätzlich zur App-Level Rate Limiting)
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS Headers (falls nicht von der App gesetzt)
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://keiko-frontend.example.com,https://keiko-backend.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
spec:
  ingressClassName: nginx
  
  tls:
  - hosts:
    - api-contracts.keiko.example.com
    secretName: keiko-api-contracts-tls
  
  rules:
  - host: api-contracts.keiko.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: keiko-api-contracts-service
            port:
              number: 3000

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # ACME-Server für Let's Encrypt Production
    server: https://acme-v02.api.letsencrypt.org/directory
    
    # E-Mail für Benachrichtigungen
    email: o.scharkowski@oscharko.de
    
    # Private Key Secret
    privateKeySecretRef:
      name: letsencrypt-prod
    
    # HTTP01 Challenge für Domain-Validierung
    solvers:
    - http01:
        ingress:
          class: nginx

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    # ACME-Server für Let's Encrypt Staging (für Tests)
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    
    # E-Mail für Benachrichtigungen
    email: o.scharkowski@oscharko.de
    
    # Private Key Secret
    privateKeySecretRef:
      name: letsencrypt-staging
    
    # HTTP01 Challenge für Domain-Validierung
    solvers:
    - http01:
        ingress:
          class: nginx
