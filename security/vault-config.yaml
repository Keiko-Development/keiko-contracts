apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
  namespace: keiko-security
  labels:
    app: vault
    security.keiko.io/level: "critical"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
      annotations:
        vault.hashicorp.com/agent-inject: "false"
    spec:
      serviceAccountName: vault-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
        fsGroup: 1000
      containers:
      - name: vault
        image: hashicorp/vault:1.15.0
        args:
          - "vault"
          - "server"
          - "-config=/vault/config/vault.hcl"
        ports:
        - containerPort: 8200
          name: vault
        - containerPort: 8201
          name: cluster
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 100
          capabilities:
            drop:
            - ALL
            add:
            - IPC_LOCK
        env:
        - name: VAULT_ADDR
          value: "http://127.0.0.1:8200"
        - name: VAULT_API_ADDR
          value: "http://vault.keiko-security.svc.cluster.local:8200"
        - name: VAULT_CLUSTER_ADDR
          value: "http://vault.keiko-security.svc.cluster.local:8201"
        - name: VAULT_LOG_LEVEL
          value: "info"
        - name: VAULT_RAFT_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
        - name: vault-data
          mountPath: /vault/data
        - name: tmp-volume
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: vault-config
        configMap:
          name: vault-config
      - name: vault-data
        persistentVolumeClaim:
          claimName: vault-data
      - name: tmp-volume
        emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: keiko-security
  labels:
    app: vault
data:
  vault.hcl: |
    ui = true
    
    listener "tcp" {
      address = "0.0.0.0:8200"
      tls_disable = true
    }
    
    storage "raft" {
      path = "/vault/data"
      node_id = "vault-0"
    }
    
    cluster_addr = "http://vault.keiko-security.svc.cluster.local:8201"
    api_addr = "http://vault.keiko-security.svc.cluster.local:8200"
    
    log_level = "info"
    
    # Disable mlock for containers
    disable_mlock = true
    
    # Enable audit logging
    # audit "file" {
    #   file_path = "/vault/logs/audit.log"
    # }

---
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: keiko-security
  labels:
    app: vault
spec:
  selector:
    app: vault
  ports:
  - name: vault
    port: 8200
    targetPort: 8200
  - name: cluster
    port: 8201
    targetPort: 8201
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-data
  namespace: keiko-security
  labels:
    app: vault
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-sa
  namespace: keiko-security
  labels:
    app: vault

---
# Vault Agent Injector (für automatische Secret-Injection)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-agent-injector
  namespace: keiko-security
  labels:
    app: vault-agent-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault-agent-injector
  template:
    metadata:
      labels:
        app: vault-agent-injector
    spec:
      serviceAccountName: vault-agent-injector-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
        fsGroup: 1000
      containers:
      - name: vault-agent-injector
        image: hashicorp/vault-k8s:1.3.0
        args:
          - "agent-inject"
          - "-vault-addr=http://vault.keiko-security.svc.cluster.local:8200"
          - "-vault-auth-path=auth/kubernetes"
          - "-log-level=info"
        ports:
        - containerPort: 8080
          name: webhook
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 100
          capabilities:
            drop:
            - ALL
        env:
        - name: AGENT_INJECT_LISTEN
          value: ":8080"
        - name: AGENT_INJECT_LOG_LEVEL
          value: "info"
        - name: AGENT_INJECT_VAULT_ADDR
          value: "http://vault.keiko-security.svc.cluster.local:8200"
        - name: AGENT_INJECT_VAULT_AUTH_PATH
          value: "auth/kubernetes"
        - name: AGENT_INJECT_TLS_AUTO
          value: "vault-agent-injector-cfg"
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: tmp-volume
        emptyDir: {}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-agent-injector-sa
  namespace: keiko-security
  labels:
    app: vault-agent-injector

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-agent-injector-role
  labels:
    app: vault-agent-injector
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: ["get", "list", "watch", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-agent-injector-binding
  labels:
    app: vault-agent-injector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault-agent-injector-role
subjects:
- kind: ServiceAccount
  name: vault-agent-injector-sa
  namespace: keiko-security

---
# Secret für Vault Initialization
apiVersion: v1
kind: Secret
metadata:
  name: vault-init
  namespace: keiko-security
  labels:
    app: vault
type: Opaque
stringData:
  init.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Warte auf Vault
    until curl -s http://vault.keiko-security.svc.cluster.local:8200/v1/sys/health; do
      echo "Waiting for Vault..."
      sleep 5
    done
    
    # Prüfe ob Vault bereits initialisiert ist
    if curl -s http://vault.keiko-security.svc.cluster.local:8200/v1/sys/init | grep -q '"initialized":true'; then
      echo "Vault already initialized"
      exit 0
    fi
    
    # Initialisiere Vault
    echo "Initializing Vault..."
    INIT_RESPONSE=$(curl -s -X POST \
      -d '{"secret_shares": 5, "secret_threshold": 3}' \
      http://vault.keiko-security.svc.cluster.local:8200/v1/sys/init)
    
    # Speichere Unseal Keys und Root Token
    echo "$INIT_RESPONSE" | jq -r '.keys[]' > /tmp/unseal-keys
    echo "$INIT_RESPONSE" | jq -r '.root_token' > /tmp/root-token
    
    # Unseal Vault
    for key in $(head -3 /tmp/unseal-keys); do
      curl -s -X POST \
        -d "{\"key\": \"$key\"}" \
        http://vault.keiko-security.svc.cluster.local:8200/v1/sys/unseal
    done
    
    echo "Vault initialized and unsealed"
